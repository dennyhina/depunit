= Introduction =

Reason for creating yet another Java unit test framework.  I know it is insane, there are already so many to choose from.  I admit I have only used two: JUnit and TestNG.  Both very good but, always lacking in my mind.  I'll start by telling what I didn't like about these two and if you can sympathise, maybe DepUnit is for you.

JUnit:  Annotations were a huge step in the right direction for making this one easier to use.  It always seemed wrong to me to have each test method executed on its own instance of the class.  If I wanted to share data among the tests it had to be placed statically on the object.  Each method on its own instance kind of takes me back to my procedural programming days.

When using JUnit I found my self creating a lot of setup and tear down code for my tests.  Usually the setup and tear down code could and should be tests as well.  I would resort to ordering my tests in the class in such a way so that the first tests were setup for the middle tests and then the last test were the tear down part.  For example, say you have a server you are testing.  Your code needs to log in, create a project, run some tests, delete the project and then log out.  Login, create project, could be setup and delete project and logout could be tear down methods or the could all be tests.  I created these ugly unit test classes where everything was static so each of the methods could get to it.  My login would set some session handle.  The create project would set some project ID.  And so on.  I found very few of my unit tests to fit withing the JUnit paradigm.  I also thought it would be nice if JUnit would stop if a test failed so that all the rest that depended on it wouldn't fail and clog up my log.  So I moved on to TestNG.

TestNG:  What a step in the right direction.  It would stop on an error.  It had dependencies.  But again I had issues.  I wanted to set soft dependencies (Basically A will run after B weather A fails or not).  Also TestNG messes up the order of the tests in a class.  This shouldn't bug me but it does.  (I'll finish this later)...


= Details =

Data driven unit tests.